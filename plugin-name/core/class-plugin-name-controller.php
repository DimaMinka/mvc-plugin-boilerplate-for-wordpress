<?php

/**
 * Abstract class to define/implement base methods for all controller classes
 *
 * @since      1.0.0
 * @package    Plugin_Name
 * @subpackage Plugin_Name/controllers
 *
 */

if ( ! class_exists( 'Plugin_Name_Controller' ) ) {

	abstract class Plugin_Name_Controller {

		private static $instances = array();
		protected $model;

		/**
		 * Provides access to a single instance of a module using the singleton pattern
		 *
		 * @return object
		 *
		 * @since    1.0.0
		 */
		public static function get_instance() {

			$classname = get_called_class();

			if ( ! isset( self::$instances[ $classname ] ) ) {
				self::$instances[ $classname ] = new $classname();
			}
			return self::$instances[ $classname ];

		}

		/**
		 * Get model
		 *
		 * @return object
		 *
		 * @since    1.0.0
		 */
		protected static function get_model() {

			return static::get_instance()->model;

		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @since    1.0.0
		 */
		protected static function clear_caching_plugins() {

			// WP Super Cache
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );
				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}

		}

		/**
		 * Constructor
		 *
		 */
		abstract protected function __construct();

		/**
		 * Register callbacks for actions and filters
		 *
		 */
		abstract protected function register_hook_callbacks();

	}

}
